每个顶点作为链表中的结点,结点的构成分为数据和指针域
数据域存储图中各顶点中存储的数据
指针域负责表示顶点之间的关联

邻接表
邻接多重表
十字链表

通过当前顶点，可以直接找到下一个顶点。邻接的意思是顶点之间有边或者弧存在。

使用邻接表存储表，图中的每一个顶点和它相关的邻接点，都存储在一个链表中。每个链表都配有头结点，头结点的数据域存储顶点本身的数据
后续链表中额各个结点存储的是当前顶点的所有邻接点。

有多少顶点，就构建多少个链表。

Method: 将所有链表的链表头按照一定的顺序存储在一个数组中。

头结点需要存储每个顶点的数据和下一个结点的指针

每个顶点的数据都存储在数据中，所以每个邻接点只需要存储在数组中，所以每个邻接点只需要存储自己在数组中的位置下标即可。

还需要一个指向下一个结点的指针。

最后，如果存储的是网，还需要要记录一个权值的信息域。所以表头结点和其他结点的构造分别为。

data->firstarc                              adjvex->nextarc->info

info 域对于无向图来说，本身不具备权值和其他相关信息，可以根据需要将之删除

v1  ---->   v2   0 [v1][] ->[2][] ->[1][] END
| \              1 [v2][] END
|  \             2 [v3][]  ->[3][] END
j    <-          3 [v4][]  ->[0][] END //以上为有向图
|       \
|        \
v3  ---->   v4  


_______
邻接表计算顶点的度
使用邻接表存储无向图， 各顶点的度为各自链表中包含的结点数
有向图时，各自链表中具备的结点数为该顶点的出度。
求入度时，需要遍历整个邻接表中的结点,统计数据域和该顶点数据域相同的结点的个数，这便是入度。

对于求有向图中某结点的入度， 还有一种办法，在建立一个逆邻接表， 此表只用于存储图中每个指向该顶点的所有顶点在数组中的位置下标。例如，构建图2(A)的逆向邻接表，结果如下：


0       [v1][] ->[3][END] // 逆向，本来是v1-> ， 但是这个选项本来是v4->v1, 3->0
1       [v2][] ->[0][END] // v1->v2(0->1)，现如今v2->v1
2       [v3][] ->[0][END] // v1->v3(0->2)
3       [v4][] ->[2][END] // v3->v4(2->3)



————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
十字链表
*********
十字链表主要存储有向图，有向网
与同邻接表的相同的是：
图中每个顶点各自构成一个链表，为链表的首元结点。
有向图的话，有弧头和弧尾。
一个顶点的所有弧头即该顶点的入度。
弧尾就是该顶点的出度。
每个顶点构成的链表中，以该顶点作为弧头的弧，单独构成一个链表，以该顶点作为弧尾的弧也单独构成一个链表。

两个链表的表头都为该顶点构成的头结点。这样由每个顶点构成的链表按照一定的顺序存储在数组中，就构成了十字链表。
十字链表中两种结点构成：
顶点结点
弧结点

1、弧结点: tailvex => headvex => hlink=> info  // tailvex 表示 弧尾对应的顶点在数组中位置下标； headvex 表示 弧头对应的顶点在数组中位置下标; hlink,tlink分别指向弧头相同的下一个弧度和弧尾相同的下一个弧，info为指针域，权重（与弧具有相关信息）
2、顶点结点 data => firstin => fistout // data * 该顶点含有的数据 ,first and firstout 两个指针域， 分别指向该顶点为弧头和弧尾的首个弧结点


十字链表图，后面跟几个长方体顶点结点 就有几个
